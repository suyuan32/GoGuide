import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as s,d as n}from"./app-DLqeUa4U.js";const a={},l=n(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p><strong>Lancet</strong> 是一个 Go 语言编写的工具库，提供了一些常用的工具函数和工具方法，方便开发者进行开发。Lancet 的设计目标是提供一些常用的工具函数和工具方法，让开发者可以专注于业务逻辑的实现，而不用花费过多精力在工具函数和工具方法的开发上。</p><p>Lancet 的作用和 Java 中的 Hutool 类似，提供了大量可以直接使用的函数，可以方便地调用，减少重复造轮子。</p><h2 id="主要功能" tabindex="-1"><a class="header-anchor" href="#主要功能"><span>主要功能</span></a></h2><table><thead><tr><th><strong>功能模块</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Algorithm</td><td>提供了一些常用的算法函数。</td></tr><tr><td>Compare</td><td>用于比较数据的函数，例如比较两个值的大小。</td></tr><tr><td>Concurrency</td><td>处理并发操作的工具函数，包括协程、锁等。</td></tr><tr><td>Condition</td><td>用于条件判断的函数，例如判断某个值是否满足某个条件。</td></tr><tr><td>Convertor</td><td>数据类型转换的工具函数，例如将字符串转换为整数。</td></tr><tr><td>Cryptor</td><td>加密和解密相关的函数。</td></tr><tr><td>Datetime</td><td>处理日期和时间的函数，例如格式化日期、计算时间差等。</td></tr><tr><td>Datastructure</td><td>提供了一些常用的数据结构，例如栈、队列、链表等。</td></tr><tr><td>Fileutil</td><td>文件操作的工具函数，例如读写文件、创建目录等。</td></tr><tr><td>Formatter</td><td>格式化字符串的函数，例如填充字符串、截断字符串等。</td></tr><tr><td>Function</td><td>与函数相关的工具函数，例如函数的柯里化、反柯里化等。</td></tr><tr><td>Maputil</td><td>处理 map 的工具函数，例如合并 map、遍历 map 等。</td></tr><tr><td>Mathutil</td><td>数学计算相关的函数，例如取绝对值、求平方根等。</td></tr><tr><td>Netutil</td><td>处理网络和 HTTP 请求的工具函数，例如发送 HTTP 请求、解析 URL 等。</td></tr><tr><td>Pointer</td><td>操作指针的函数，例如获取指针的值、创建指针等。</td></tr><tr><td>Random</td><td>生成随机数的函数。</td></tr><tr><td>Retry</td><td>实现重试机制的函数，例如在网络请求失败时进行重试。</td></tr><tr><td>Slice</td><td>处理切片的工具函数，例如切片的截取、合并等。</td></tr><tr><td>Stream</td><td>提供了类似流式处理的函数，例如 map、filter、reduce 等。</td></tr><tr><td>Structs</td><td>处理结构体的工具函数，例如获取结构体字段的值、判断结构体是否为空等。</td></tr><tr><td>Strutil</td><td>处理字符串的工具函数，例如字符串的拼接、截取、替换等。</td></tr><tr><td>System</td><td>系统相关的函数，例如获取环境变量、执行系统命令等。</td></tr><tr><td>Tuple</td><td>处理元组的工具函数，例如创建元组、获取元组的值等。</td></tr><tr><td>Validator</td><td>数据验证的函数，例如验证邮箱、手机号等。</td></tr><tr><td>Xerror</td><td>错误处理相关的函数，例如创建错误、判断错误类型等。</td></tr></tbody></table><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h2><p>冒泡排序</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#98C379;">github.com/duke-git/lancet/v2/algorithm</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> intComparator</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">intComparator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Compare</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">v1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">v2</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    val1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> v1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    val2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">_</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> v2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //ascending order</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> val1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> val2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> val1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> val2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    numbers</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    comparator</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> :=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">intComparator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    algorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">BubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">comparator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // [1 2 3 4 5 6]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),e=[l];function d(r,h){return s(),t("div",null,e)}const c=i(a,[["render",d],["__file","1-lancet.html.vue"]]),o=JSON.parse('{"path":"/guide/library/Util/1-lancet.html","title":"Lancet","lang":"zh-CN","frontmatter":{"order":1,"title":"Lancet","head":[["meta",{"name":"keywords","content":"Lancet, golang, tools, utility"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://goguide.ryansu.tech/en/guide/library/Util/1-lancet.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/guide/library/Util/1-lancet.html"}],["meta",{"property":"og:site_name","content":"Go 面试宝典"}],["meta",{"property":"og:title","content":"Lancet"}],["meta",{"property":"og:description","content":"介绍 Lancet 是一个 Go 语言编写的工具库，提供了一些常用的工具函数和工具方法，方便开发者进行开发。Lancet 的设计目标是提供一些常用的工具函数和工具方法，让开发者可以专注于业务逻辑的实现，而不用花费过多精力在工具函数和工具方法的开发上。 Lancet 的作用和 Java 中的 Hutool 类似，提供了大量可以直接使用的函数，可以方便地调..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-28T01:35:11.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-04-28T01:35:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lancet\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-28T01:35:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]],"description":"介绍 Lancet 是一个 Go 语言编写的工具库，提供了一些常用的工具函数和工具方法，方便开发者进行开发。Lancet 的设计目标是提供一些常用的工具函数和工具方法，让开发者可以专注于业务逻辑的实现，而不用花费过多精力在工具函数和工具方法的开发上。 Lancet 的作用和 Java 中的 Hutool 类似，提供了大量可以直接使用的函数，可以方便地调..."},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"主要功能","slug":"主要功能","link":"#主要功能","children":[]},{"level":2,"title":"例子","slug":"例子","link":"#例子","children":[]}],"git":{"createdTime":1714268111000,"updatedTime":1714268111000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":1}]},"readingTime":{"minutes":2.54,"words":762},"filePathRelative":"guide/library/Util/1-lancet.md","localizedDate":"2024年4月28日","autoDesc":true,"excerpt":"<h2>介绍</h2>\\n<p><strong>Lancet</strong> 是一个 Go 语言编写的工具库，提供了一些常用的工具函数和工具方法，方便开发者进行开发。Lancet 的设计目标是提供一些常用的工具函数和工具方法，让开发者可以专注于业务逻辑的实现，而不用花费过多精力在工具函数和工具方法的开发上。</p>\\n<p>Lancet 的作用和 Java 中的 Hutool 类似，提供了大量可以直接使用的函数，可以方便地调用，减少重复造轮子。</p>\\n<h2>主要功能</h2>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>功能模块</strong></th>\\n<th><strong>描述</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Algorithm</td>\\n<td>提供了一些常用的算法函数。</td>\\n</tr>\\n<tr>\\n<td>Compare</td>\\n<td>用于比较数据的函数，例如比较两个值的大小。</td>\\n</tr>\\n<tr>\\n<td>Concurrency</td>\\n<td>处理并发操作的工具函数，包括协程、锁等。</td>\\n</tr>\\n<tr>\\n<td>Condition</td>\\n<td>用于条件判断的函数，例如判断某个值是否满足某个条件。</td>\\n</tr>\\n<tr>\\n<td>Convertor</td>\\n<td>数据类型转换的工具函数，例如将字符串转换为整数。</td>\\n</tr>\\n<tr>\\n<td>Cryptor</td>\\n<td>加密和解密相关的函数。</td>\\n</tr>\\n<tr>\\n<td>Datetime</td>\\n<td>处理日期和时间的函数，例如格式化日期、计算时间差等。</td>\\n</tr>\\n<tr>\\n<td>Datastructure</td>\\n<td>提供了一些常用的数据结构，例如栈、队列、链表等。</td>\\n</tr>\\n<tr>\\n<td>Fileutil</td>\\n<td>文件操作的工具函数，例如读写文件、创建目录等。</td>\\n</tr>\\n<tr>\\n<td>Formatter</td>\\n<td>格式化字符串的函数，例如填充字符串、截断字符串等。</td>\\n</tr>\\n<tr>\\n<td>Function</td>\\n<td>与函数相关的工具函数，例如函数的柯里化、反柯里化等。</td>\\n</tr>\\n<tr>\\n<td>Maputil</td>\\n<td>处理 map 的工具函数，例如合并 map、遍历 map 等。</td>\\n</tr>\\n<tr>\\n<td>Mathutil</td>\\n<td>数学计算相关的函数，例如取绝对值、求平方根等。</td>\\n</tr>\\n<tr>\\n<td>Netutil</td>\\n<td>处理网络和 HTTP 请求的工具函数，例如发送 HTTP 请求、解析 URL 等。</td>\\n</tr>\\n<tr>\\n<td>Pointer</td>\\n<td>操作指针的函数，例如获取指针的值、创建指针等。</td>\\n</tr>\\n<tr>\\n<td>Random</td>\\n<td>生成随机数的函数。</td>\\n</tr>\\n<tr>\\n<td>Retry</td>\\n<td>实现重试机制的函数，例如在网络请求失败时进行重试。</td>\\n</tr>\\n<tr>\\n<td>Slice</td>\\n<td>处理切片的工具函数，例如切片的截取、合并等。</td>\\n</tr>\\n<tr>\\n<td>Stream</td>\\n<td>提供了类似流式处理的函数，例如 map、filter、reduce 等。</td>\\n</tr>\\n<tr>\\n<td>Structs</td>\\n<td>处理结构体的工具函数，例如获取结构体字段的值、判断结构体是否为空等。</td>\\n</tr>\\n<tr>\\n<td>Strutil</td>\\n<td>处理字符串的工具函数，例如字符串的拼接、截取、替换等。</td>\\n</tr>\\n<tr>\\n<td>System</td>\\n<td>系统相关的函数，例如获取环境变量、执行系统命令等。</td>\\n</tr>\\n<tr>\\n<td>Tuple</td>\\n<td>处理元组的工具函数，例如创建元组、获取元组的值等。</td>\\n</tr>\\n<tr>\\n<td>Validator</td>\\n<td>数据验证的函数，例如验证邮箱、手机号等。</td>\\n</tr>\\n<tr>\\n<td>Xerror</td>\\n<td>错误处理相关的函数，例如创建错误、判断错误类型等。</td>\\n</tr>\\n</tbody>\\n</table>"}');export{c as comp,o as data};
