import{_ as n,a as i,b as a,c as l}from"./scheduler-lifetime-EfSTHT2-.js";import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as g,c as u,a as t,b as c,w as r,d,e,o as p}from"./app-DLqeUa4U.js";const h={},m=d('<h2 id="scheduler" tabindex="-1"><a class="header-anchor" href="#scheduler"><span>Scheduler</span></a></h2><div class="hint-container info"><p class="hint-container-title">GO 程序和操作系统之间的关系</p><figure><img src="'+n+'" alt="os-runtime-program" tabindex="0" loading="lazy"><figcaption>os-runtime-program</figcaption></figure><p>通过上图我们可以看到，操作系统内核和我们写的逻辑代码之间通过 runtime 进行交互，runtime 会调用操作系统的系统调用，操作系统会调用硬件资源，这样我们的程序才能运行。</p></div><p>所谓的 Scheduler 就是负责调度 goroutine 的模块，它会根据一定的策略来调度 goroutine 的执行，这样才能保证 goroutine 的执行顺序和并发度。其使用的模型是 GMP 模型。</p><h3 id="gmp-模型" tabindex="-1"><a class="header-anchor" href="#gmp-模型"><span>GMP 模型</span></a></h3><p>GMP 模型是 Go 语言调度器的核心模型，它是 Go 语言调度器的基础。GMP 模型是指：</p><table><thead><tr><th><strong>组件</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>G (Goroutine)</td><td>表示一个 Goroutine，包含栈和相关的上下文信息</td></tr><tr><td>M (Machine)</td><td>表示一个执行线程，负责将 Goroutine 映射到操作系统的线程上。每个 M 都有自己的调用栈和寄存器状态</td></tr><tr><td>P (Processor)</td><td>表示一个逻辑处理器，维护一个处于可运行状态的 Goroutine 队列，每个 M 都和一个 P 相关联</td></tr></tbody></table><figure><img src="'+i+'" alt="gmp" tabindex="0" loading="lazy"><figcaption>gmp</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><strong>全局队列</strong>：存放所有正在等待运行的 <code>G</code></li><li><strong>本地队列</strong>：存放当前 <code>P</code> 的 <code>G</code> 每个 <code>P</code> 都有一个本地队列， 用于存放当前 <code>P</code> 等待和正在运行的 <code>G</code>，每个 <code>P</code> 的本地队列中最多存放 <code>256</code> 个 <code>G</code> 。创建 <code>G</code> 时，会优先放入本地队列，如果本地队列满了， 则会将队列中一半的 <code>G</code> 移动到全局队列中。</li></ul></div><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li><strong>P 的数量</strong>：<code>P</code> 的数量是固定的，由 <code>GOMAXPROCS</code> 决定，即最大并发数, 默认为 <code>CPU</code> 核数。</li><li><strong>M 的数量</strong>：<code>M</code> 的数量是动态的，由调度器决定，根据当前的负载情况动态调整, GO默认设置为 10000，实际上内核很难达到该限制，可以认为是没有限制。<code>M</code> 想要运行任务就需要获取 <code>P</code>，如果没有 <code>P</code>，<code>M</code> 就会阻塞。如果 <code>P</code> 的本地队列为空，<code>M</code> 会从全局队列中获取 <code>G</code>，放入本地队列。 如果全局队列也为空，<code>M</code> 会从其他随机一个 <code>P</code> 的本地队列中获取一半的 <code>G</code> 放到本地队列中。</li></ul></div><div class="hint-container info"><p class="hint-container-title">名词缩写</p><ul><li><strong>LRQ</strong> (local runnable queue): 本地队列</li><li><strong>GRQ</strong> (global runnable queue): 全局队列</li></ul></div>',10),P={class:"hint-container details"},G=t("summary",null,"GMP 数据结构",-1),M=t("p",null,[t("code",null,"G"),e(" 的数据结构 "),t("a",{href:"https://github.com/golang/go/blob/16ce8b3925deaeb72541ee96b6ee23a08fc21dea/src/runtime/runtime2.go#L422",target:"_blank",rel:"noopener noreferrer"},"源码")],-1),b=t("li",null,[t("p",null,[t("code",null,"M"),e(" 的数据结构 "),t("a",{href:"https://github.com/golang/go/blob/16ce8b3925deaeb72541ee96b6ee23a08fc21dea/src/runtime/runtime2.go#L552",target:"_blank",rel:"noopener noreferrer"},"源码")])],-1),f=d('<blockquote><p><strong>重要字段</strong></p></blockquote><table><thead><tr><th><strong>字段</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>g0</td><td>*g</td><td>每个 M 都会有一个 g0</td></tr><tr><td>curg</td><td>*g</td><td>正在运行的 <code>G</code></td></tr><tr><td>p</td><td>puintptr</td><td>绑定的 <code>P</code></td></tr><tr><td>nextp</td><td>puintptr</td><td>当 M 被唤醒时，优先绑定的 <code>P</code></td></tr><tr><td>id</td><td>int64</td><td>M 的 ID</td></tr><tr><td>spinning</td><td>bool</td><td>是否处于自旋状态</td></tr><tr><td>park</td><td>note</td><td>用于 M 的休眠和唤醒</td></tr><tr><td>alllink</td><td>*m</td><td>在 allm 链表上的 M</td></tr><tr><td>schedlink</td><td>muintptr</td><td>下一个 M，构成 M 链表</td></tr><tr><td>mcache</td><td>*mcache</td><td>内存分配的 M 缓存大小</td></tr><tr><td>lockedg</td><td>guintptr</td><td>是否被锁，锁的指针</td></tr><tr><td>freelink</td><td>*m</td><td>在 sched.freem 上的 M</td></tr></tbody></table><ul><li>P 的数据结构 <a href="https://github.com/golang/go/blob/master/src/runtime/runtime2.go#L422" target="_blank" rel="noopener noreferrer">源码</a></li></ul><blockquote><p><strong>重要字段</strong></p></blockquote><table><thead><tr><th><strong>字段</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>id</td><td>int32</td><td><code>P</code> 的唯一标识符</td></tr><tr><td>status</td><td>uint32</td><td><code>P</code> 的状态</td></tr><tr><td>link</td><td>puintptr</td><td>下一个 <code>P，在</code> <code>P</code> 链表中</td></tr><tr><td>m</td><td>muintptr</td><td>拥有这个 <code>P</code> 的 <code>M</code></td></tr><tr><td>mcache</td><td>*mcache</td><td>用于内存分配的 <code>P</code> 本地缓存</td></tr><tr><td>runqhead</td><td>uint32</td><td>P 本地 <code>runnable</code> 状态的 <code>G</code> 队列头部，无锁访问</td></tr><tr><td>runqtail</td><td>uint32</td><td>P 本地 <code>runnable</code> 状态的 <code>G</code> 队列尾部，无锁访问</td></tr><tr><td>runq</td><td>[256]guintptr</td><td>P 本地 <code>runnable</code> 状态的 <code>G</code> 队列，最多 <code>256</code> 个元素</td></tr><tr><td>runnext</td><td>guintptr</td><td>一个比 <code>runq</code> 优先级更高的 runnable <code>G</code></td></tr><tr><td>gFree</td><td>struct</td><td>状态为 dead 的 <code>G</code> 链表，在获取 <code>G</code> 时会从这里面获取。</td></tr><tr><td>gcBgMarkWorker</td><td>guintptr</td><td>(原子操作) 用于 <code>GC</code> 后台标记的 <code>worker</code></td></tr><tr><td>gcw</td><td>gcWork</td><td>用于 <code>GC</code> 的工作结构体。</td></tr></tbody></table><p><code>P</code> 的5个状态</p><table><thead><tr><th><strong>状态字段</strong></th><th><strong>编号</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>_Pidle</td><td>0</td><td>表示 P 当前未被用于运行用户代码或调度程序。通常，它在空闲 P 列表上，并可供调度程序使用，但它可能正处于其他状态之间的过渡中。P 属于空闲列表或正在过渡其状态的任何其他实体。其运行队列为空。</td></tr><tr><td>_Prunning</td><td>1</td><td>表示 P 属于某个 M 并用于运行用户代码或调度程序。只有拥有此 P 的 M 允许从 _Prunning 更改 P 的状态。M 可以将 P 过渡到 _Pidle（如果没有更多工作要做），_Psyscall（进入系统调用时）或 _Pgcstop（用于 GC 停顿）。M 还可以直接将 P 的所有权移交给另一个 M（例如，以调度锁定的 G）。</td></tr><tr><td>_Psyscall</td><td>2</td><td>表示 P 当前未运行用户代码。它与某个 M 在系统调用中具有亲和性，但不由该 M 拥有，并且可能被其他 M 抢占。这类似于 _Pidle，但使用轻量级过渡并保持 M 亲和性。离开 _Psyscall 必须使用 CAS 完成，以便抢占或重新获取 P。请注意，存在 ABA 风险：即使 M 在系统调用后成功 CAS 回其原始 P 为 _Prunning，它也必须理解 P 可能在此期间被其他 M 使用过。</td></tr><tr><td>_Pgcstop</td><td>3</td><td>表示 P 已停止用于 STW 并由停止世界的 M 拥有。停止世界的 M 继续使用其 P，即使在 _Pgcstop 中也是如此。从 _Prunning 过渡到 _Pgcstop 会导致 M 释放其 P 并进行休眠。P 保留其运行队列，startTheWorld 将在具有非空运行队列的 P 上重新启动调度程序。</td></tr><tr><td>_Pdead</td><td>4</td><td>表示 P 不再使用（GOMAXPROCS 减少）。如果 GOMAXPROCS 增加，我们会重用 P。已死亡的 P 大部分资源已被剥离，尽管仍有一些资源保留（例如，跟踪缓冲区）。</td></tr></tbody></table>',7),_=d('<div class="hint-container important"><p class="hint-container-title">调度器策略</p><table><thead><tr><th>策略</th><th>描述</th></tr></thead><tbody><tr><td>抢占式调度</td><td>在协程中需要一个协程主动让出 CPU 下一个协程才能使用 CPU， 而 Goroutine 规定一个 Goroutine 每次最多只能占用 10ms 的 CPU，然后就要切换到下一个, 防止其他协程长时间不被执行</td></tr><tr><td>复用线程</td><td>Go 语言的调度器会复用线程，而不是每次都创建新的线程，这样可以减少线程创建和销毁的开销，提高性能。 <br>- <strong>工作偷取(Work stealing)</strong>:当 <code>M</code> 没有可运行的 <code>G</code> 时，会尝试从其他线程绑定的 <code>P</code> 的本地队列中偷取一半的 <code>G</code>来运行，而不是销毁 <code>M</code> <br>- <strong>挂起机制(Hand off)</strong>: 当 <code>G</code> 由于系统调用而阻塞时, <code>M</code> 会释放绑定的 <code>P</code> 供其他 <code>M</code> 使用</td></tr><tr><td>并行</td><td>通过 <code>GOMAXPROCS</code> 配置 <code>P</code> 的数量，从而实现并行执行，<code>P</code> 的数量决定了并行度，<code>P</code> 的数量等于 CPU 核数时，可以实现最大并行度。</td></tr><tr><td>全局队列</td><td>当本地队列中没有可运行的 <code>G</code>， <code>M</code> 会先去全局队列尝试获取 <code>G</code>， 若全局队列中没有待运行的 <code>G</code> 则会尝试去其他 <code>P</code> 的本地队列中偷取 <code>G</code></td></tr></tbody></table></div><h3 id="gmp-调度流程" tabindex="-1"><a class="header-anchor" href="#gmp-调度流程"><span>GMP 调度流程</span></a></h3><figure><img src="'+a+'" alt="schedule" tabindex="0" loading="lazy"><figcaption>schedule</figcaption></figure><div class="hint-container info"><p class="hint-container-title">Goroutine 调度流程</p><ul><li>创建一个 <code>G</code></li></ul><p>如果本地队列没满，则随机放入一个未满的本地队列，否则放入全局队列。</p><ul><li>执行 <code>G</code></li></ul><p><code>P</code> 会获取一个 <code>G</code> 在 <code>M</code> 中执行，若 <code>G</code> 产生 <code>systemCall</code> 阻塞，则会将 <code>M</code> 放入休眠队列，并从休眠队列中取出一个 <code>M</code> 接管 <code>P</code> 执行，若休眠队列为空则创建一个新的 <code>M</code> 来接管 <code>P</code>。</p><ul><li>获取 <code>G</code></li></ul><p>若本地队列中 <code>G</code> 已经执行完，则尝试从从全局队列中获取 <code>G</code>，若全局队列中没有可运行的 <code>G</code>， 则从其他 <code>P</code> 的本地队列中偷取 <code>G</code></p></div><div class="hint-container tip"><p class="hint-container-title">常见的阻塞</p><ul><li><code>I/O</code> <code>Select</code></li><li><code>Block on syscall</code></li><li><code>Channel</code></li><li><code>Mutex</code></li><li><code>Sleep</code></li><li><code>runtime.Gosched()</code></li></ul></div><h3 id="m-的生命周期" tabindex="-1"><a class="header-anchor" href="#m-的生命周期"><span>M 的生命周期</span></a></h3><figure><img src="'+l+'" alt="Scheduler Lifetime" tabindex="0" loading="lazy"><figcaption>Scheduler Lifetime</figcaption></figure><div class="hint-container info"><p class="hint-container-title">M0 和 G0</p><table><thead><tr><th><strong>对象</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>M0</td><td><code>M0</code> 是主线程创建的第一个线程，负责创建和运行第一个 <code>G</code>, 存储在 <code>runtime.mO</code> 中，不需要在 <code>Heap</code> 上分配</td></tr><tr><td>G0</td><td><code>M0</code> 创建之后会立即创建一个 <code>G0</code> , 这个 <code>G0</code> 只用于调度 <code>G</code>， 不执行逻辑代码， <code>G0</code> 和 <code>M0</code> 对应</td></tr></tbody></table></div>',8);function y(k,v){const o=g("RouteLink");return p(),u("div",null,[m,t("details",P,[G,t("ul",null,[t("li",null,[M,t("ul",null,[t("li",null,[c(o,{to:"/guide/concepts/golang/9-goroutine.html#goroutine-%E5%AD%97%E6%AE%B5%E4%BB%8B%E7%BB%8D"},{default:r(()=>[e("重要字段")]),_:1})]),t("li",null,[c(o,{to:"/guide/concepts/golang/9-goroutine.html#goroutine-%E7%9A%849%E7%A7%8D%E7%8A%B6%E6%80%81%E7%B1%BB%E5%9E%8B"},{default:r(()=>[e("Goroutine 的9种状态")]),_:1})])])]),b]),f]),_])}const B=s(h,[["render",y],["__file","20-gmp.html.vue"]]),O=JSON.parse('{"path":"/guide/concepts/golang/20-gmp.html","title":"GMP 调度器","lang":"zh-CN","frontmatter":{"order":20,"title":"GMP 调度器","icon":"line-md:sunny-filled-loop-to-moon-filled-loop-transition","head":[["meta",{"name":"keywords","content":"golang, goroutine, process, thread, scheduler, GMP, GMP 调度器, Go 调度"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://goguide.ryansu.tech/en/guide/concepts/golang/20-gmp.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/guide/concepts/golang/20-gmp.html"}],["meta",{"property":"og:site_name","content":"Go 面试宝典"}],["meta",{"property":"og:title","content":"GMP 调度器"}],["meta",{"property":"og:description","content":"Scheduler GO 程序和操作系统之间的关系 os-runtime-programos-runtime-program 通过上图我们可以看到，操作系统内核和我们写的逻辑代码之间通过 runtime 进行交互，runtime 会调用操作系统的系统调用，操作系统会调用硬件资源，这样我们的程序才能运行。 所谓的 Scheduler 就是负责调度 gor..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://goguide.ryansu.tech/assets/image/article/concept/scheduler.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-11T14:12:28.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-06-11T14:12:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GMP 调度器\\",\\"image\\":[\\"https://goguide.ryansu.tech/assets/image/article/concept/scheduler.png\\",\\"https://goguide.ryansu.tech/assets/image/article/concept/gmp.png\\",\\"https://goguide.ryansu.tech/assets/image/article/concept/gofunc-schedule.png\\",\\"https://goguide.ryansu.tech/assets/image/article/concept/scheduler-lifetime.png\\"],\\"dateModified\\":\\"2024-06-11T14:12:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]],"description":"Scheduler GO 程序和操作系统之间的关系 os-runtime-programos-runtime-program 通过上图我们可以看到，操作系统内核和我们写的逻辑代码之间通过 runtime 进行交互，runtime 会调用操作系统的系统调用，操作系统会调用硬件资源，这样我们的程序才能运行。 所谓的 Scheduler 就是负责调度 gor..."},"headers":[{"level":2,"title":"Scheduler","slug":"scheduler","link":"#scheduler","children":[{"level":3,"title":"GMP 模型","slug":"gmp-模型","link":"#gmp-模型","children":[]},{"level":3,"title":"GMP 调度流程","slug":"gmp-调度流程","link":"#gmp-调度流程","children":[]},{"level":3,"title":"M 的生命周期","slug":"m-的生命周期","link":"#m-的生命周期","children":[]}]}],"git":{"createdTime":1714468351000,"updatedTime":1718115148000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":3},{"name":"yinheli","email":"me@yinheli.com","commits":1}]},"readingTime":{"minutes":6.95,"words":2084},"filePathRelative":"guide/concepts/golang/20-gmp.md","localizedDate":"2024年4月30日","autoDesc":true,"excerpt":"<h2>Scheduler</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">GO 程序和操作系统之间的关系</p>\\n<figure><img src=\\"/assets/image/article/concept/scheduler.png\\" alt=\\"os-runtime-program\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>os-runtime-program</figcaption></figure>\\n<p>通过上图我们可以看到，操作系统内核和我们写的逻辑代码之间通过 runtime 进行交互，runtime 会调用操作系统的系统调用，操作系统会调用硬件资源，这样我们的程序才能运行。</p>\\n</div>"}');export{B as comp,O as data};
