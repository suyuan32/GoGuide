import{_ as t,a as d}from"./signature-_OrRzcAy.js";import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,o,d as n}from"./app-DLqeUa4U.js";const i="/assets/image/article/network/httpsgraph.png",a={},l=n('<h3 id="osi七层模型" tabindex="-1"><a class="header-anchor" href="#osi七层模型"><span>OSI七层模型</span></a></h3><table><thead><tr><th>层级</th><th>功能</th></tr></thead><tbody><tr><td>物理层</td><td>主要实现相邻节点间比特流的透明传输，物理层定义了物理设备的标准，如网线的类型等， <code>网卡也会在这层工作</code> 。</td></tr><tr><td>数据链路层</td><td>将网络层传下来的比特数据包组装成帧，并在相邻节点的链路上传送帧。数据链路层会将0、1序列划分为具有意义的数据帧传送给另一端。</td></tr><tr><td>网络层</td><td>选择合适的路由和交换结点，能让数据及时传送，此层的数据称为数据包，要关注的是IP协议。</td></tr><tr><td>传输层</td><td>向主机进程提供通用的数据传输服务。传输层需要关注的协议有TCP协议和UDP协议。</td></tr><tr><td>会话层</td><td>负责在网络中的两节点之间建立、维持和终止通信，常见的协议有 ADSP、RPC 等。</td></tr><tr><td>表示层</td><td>主要负责数据格式的转换，解决不同系统之间通信语法问题</td></tr><tr><td>应用层</td><td>为应用程序提供交互服务，目的是更方便应用从网络中接收的数据，重点关注HTTP协议</td></tr></tbody></table><figure><img src="'+t+'" alt="osi" tabindex="0" loading="lazy"><figcaption>osi</figcaption></figure><h3 id="tcp和ip模型" tabindex="-1"><a class="header-anchor" href="#tcp和ip模型"><span>TCP和IP模型</span></a></h3><table><thead><tr><th>OSI七层模型</th><th>TCP/IP 五层模型</th><th>TCP/IP 四层模型</th><th>功能</th><th>TCP/IP协议族</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>应用层</td><td>文件传输，电子邮件，文件服务，虚拟终端等</td><td>SMTP，DNS，Telnet，TFTP，HTTP，SNHP，FTP</td></tr><tr><td>表示层</td><td>应用层</td><td>应用层</td><td>数据格式化，代码转换，数据加密</td><td>无</td></tr><tr><td>会话层</td><td>应用层</td><td>应用层</td><td>解除或建立与别的接点的联系</td><td>无</td></tr><tr><td>传输层</td><td>传输层</td><td>传输层</td><td>提供端对端的接口</td><td>TCP，UDP</td></tr><tr><td>网络层</td><td>网络层</td><td>网络层</td><td>为数据包选择路由</td><td>IP，ICHP，RIP，OSPF，BCP，ICMF</td></tr><tr><td>数据链路层</td><td>数据链路层</td><td>网络接口层</td><td>传输有地址的顿以及错误检测功能</td><td>SLIP，CSLIP，PPP，ARP，RARP，MTU</td></tr><tr><td>物理层</td><td>物理层</td><td>网络接口层</td><td>以二进制数据形式在物理媒介上传输数据</td><td>IS02110，IEEE802，IEEE802.2</td></tr></tbody></table><h3 id="http" tabindex="-1"><a class="header-anchor" href="#http"><span>HTTP</span></a></h3><h5 id="请求方法" tabindex="-1"><a class="header-anchor" href="#请求方法"><span>请求方法</span></a></h5><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>HTTP 1.0 支持三种请求方式：</p><ul><li>GET</li><li>POST</li><li>HEAD</li></ul><p>HTTP 1.1 额外支持 6 种请求方式</p><ul><li>OPTIONS</li><li>PUT</li><li>PATCH</li><li>DELETE</li><li>TRACE</li><li>CONNECT</li></ul></div><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>请求一个指定资源，用于获取数据</td></tr><tr><td>HEAD</td><td>和 GET 类似，但是只返回响应头，不返回响应体</td></tr><tr><td>POST</td><td>用于提交信息到目标地址，用于数据提交和文件上传</td></tr><tr><td>PUT</td><td>提交更新的信息，用于替换原数据</td></tr><tr><td>DELETE</td><td>删除指定的资源</td></tr><tr><td>CONNECT</td><td>与服务器建立隧道</td></tr><tr><td>OPTIONS</td><td>返回特定服务器地址所支持的 <code>HTTP</code> 请求方法, 也可用于测试服务器支持的功能</td></tr><tr><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td>PATCH</td><td>和 <code>PUT</code> 相似，主要用于部分更新</td></tr></tbody></table><h4 id="http-状态码" tabindex="-1"><a class="header-anchor" href="#http-状态码"><span>HTTP 状态码</span></a></h4><table><thead><tr><th>数字</th><th>含义</th></tr></thead><tbody><tr><td>1XX</td><td>指示信息，表示请求以接收，继续处理</td></tr><tr><td>2XX</td><td>成功，表示请求已经被成功接收、理解、接受</td></tr><tr><td>3XX</td><td>状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向</td></tr><tr><td>4XX</td><td>状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。</td></tr><tr><td>5XX</td><td>状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码</td></tr></tbody></table><details class="hint-container details"><summary>常见状态码</summary><table><thead><tr><th>HTTP 状态码</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td><strong>继续</strong> 表示客户端可以继续提交请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td><strong>切换协议</strong> 切换传输协议，只能从低版本切换到高版本，如 <code>HTTP1.0</code> 切换为 <code>HTTP1.1</code></td></tr><tr><td>200</td><td>OK</td><td><strong>请求成功</strong> 表示服务器成功返回了数据</td></tr><tr><td>201</td><td>Created</td><td><strong>已创建</strong> 表示服务器成功接收到请求并创建了对应的资源</td></tr><tr><td>202</td><td>Accepted</td><td><strong>已接受</strong> 表示服务器已经接受了请求，请求将会被处理</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td><strong>非授权信息</strong> 表示请求成功,但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td><strong>无内容</strong> 表示服务器成功处理请求</td></tr><tr><td>205</td><td>Reset Content</td><td><strong>重置内容</strong> 服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td><strong>部分内容</strong>服务器成功处理了部分GET请求</td></tr><tr><td>300</td><td>Multiple Choices</td><td><strong>多种选择</strong>请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td><strong>永久移动</strong>请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td><strong>临时移动</strong>与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td><strong>查看其它地址</strong>与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td><strong>未修改</strong> 所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td><strong>使用代理</strong> 所请求的资源必须通过代理访问</td></tr><tr><td>307</td><td>Temporary Redirect</td><td><strong>临时重定向</strong>与302类似。使用GET请求重定向</td></tr><tr><td>400</td><td>Bad Request</td><td><strong>错误请求</strong>表示客户端请求的报文有错误</td></tr><tr><td>401</td><td>Unauthorized</td><td><strong>未授权</strong>缺失或错误的认证，这个状态代码必须和<code>WWW-Authenticate</code>报头域一起使用</td></tr><tr><td>403</td><td>Forbidden</td><td><strong>禁止访问</strong>表示服务器禁止访问资源,并不是客户端的请求出错</td></tr><tr><td>404</td><td>Not Found</td><td><strong>未找到</strong>表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端</td></tr><tr><td>501</td><td>Not Implemented</td><td><strong>功能未实现</strong>表示客户端请求的功能还不支持</td></tr><tr><td>502</td><td>Bad Gateway</td><td><strong>网关错误</strong>通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误</td></tr><tr><td>503</td><td>Service Unavailable</td><td><strong>服务器不可用</strong>表示服务器当前很忙，暂时无法响应服务器</td></tr><tr><td>504</td><td>Gateway Timeout</td><td><strong>网关超时</strong>网关超时，由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答</td></tr></tbody></table></details><h4 id="https-vs-http" tabindex="-1"><a class="header-anchor" href="#https-vs-http"><span>HTTPS vs HTTP</span></a></h4><table><thead><tr><th>特性</th><th>HTTP</th><th>HTTPS</th></tr></thead><tbody><tr><td>定义</td><td>HTTP 是超文本传输协议，用于从万维网服务器传输超文本到本地浏览器的传送协议。</td><td>HTTPS 是带有安全性的 HTTP，通过 SSL/TLS 提供加密处理、数据完整性校验及身份认证。</td></tr><tr><td>端口</td><td>默认的 HTTP 端口是 80。</td><td>默认的 HTTPS 端口是 443。</td></tr><tr><td>安全性</td><td>HTTP 本身不是安全的，因为数据在传输过程中没有加密，可能会被第三方获取。</td><td>HTTPS 是安全的，因为数据在传输过程中会被加密，防止被第三方获取。</td></tr><tr><td>速度</td><td>HTTP 相对较快，因为没有加密和解密的过程。</td><td>HTTPS 相对较慢，因为数据在传输过程中需要进行加密和解密。</td></tr></tbody></table><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h4><p><code>HTTPS</code> 协议会对传输的数据进行加密，而加密过程是使用了非对称加密实现</p><ol><li><code>Client</code>发起一个<code>HTTPS</code>的请求</li><li><code>Server</code>把事先配置好的公钥证书返回给客户端。</li><li><code>Client</code>验证公钥证书：比如是否在有效期内，证书的用途是不是匹配<code>Client</code>请求的站点，是不是在<code>CRL</code>吊销列表里面，它的上一级证书是否有效，这是一个递归的过程，直到验证到根证书（操作系统内置的<code>Root</code>证书或者<code>Client</code>内置的<code>Root</code>证书），如果验证通过则继续，不通过则显示警告信息。</li><li><code>Client</code>使用伪随机数生成器生成加密所使用的对称密钥，然后用证书的公钥加密这个对称密钥，发给Server。</li><li><code>Server</code>使用自己的私钥解密这个消息，得到对称密钥。至此，<code>Client</code>和<code>Server</code>双方都持有了相同的对称密钥。</li><li><code>Server</code>使用对称密钥加密明文内容<code>A</code>，发送给<code>Client</code>。</li><li><code>Client</code>使用对称密钥解密响应的密文，得到明文内容<code>A</code>。</li><li><code>Client</code>再次发起<code>HTTPS</code>的请求，使用对称密钥加密请求的明文内容<code>B</code>，然后<code>Server</code>使用对称密钥解密密文，得到明文内容<code>B</code>。</li></ol><figure><img src="'+i+'" alt="https" tabindex="0" loading="lazy"><figcaption>https</figcaption></figure><h3 id="http-1-0-vs-1-1-vs-2-0" tabindex="-1"><a class="header-anchor" href="#http-1-0-vs-1-1-vs-2-0"><span>HTTP 1.0 vs 1.1 vs 2.0</span></a></h3><div class="hint-container tip"><p class="hint-container-title">区别</p><table><thead><tr><th>特性</th><th>HTTP 1.0</th><th>HTTP 1.1</th><th>HTTP 2.0</th></tr></thead><tbody><tr><td>连接方式</td><td>无连接，每次请求都要建立连接</td><td>长连接，减少了 TCP 连接的重复建立和断开所造成的额外开销</td><td>多路复用，一个 TCP 连接上可以并发多个 HTTP 请求</td></tr><tr><td>队头阻塞</td><td>存在，下一个请求必须在前一个请求响应到达之前才能发送</td><td>存在，虽然可以发起多个请求，但服务器必须按照接收请求的顺序发送响应</td><td>解决，可以在一个连接中并发多个请求或回应，而不用按照顺序一一对应</td></tr><tr><td>头部压缩</td><td>不支持</td><td>不支持</td><td>支持，使用 HPACK 算法对 header 进行压缩</td></tr><tr><td>服务器推送</td><td>不支持</td><td>不支持</td><td>支持</td></tr></tbody></table></div><h3 id="数字证书" tabindex="-1"><a class="header-anchor" href="#数字证书"><span>数字证书</span></a></h3><p>数字证书是一种权威性的电子文档，它提供了一种在互联网上验证身份的方式。数字证书对个人或组织的线上凭据与身份进行验证，并能让网络用户和接收者知道其所输入的数据将前往受信任的来源。它们类似于网站和用户的安全徽章，并有助于确保互联网的安全性。</p><p>数字证书由证书颁发机构（CA）所颁发，用于对线上数据进行加密。数字证书也称为公钥证书或身份证书。例如，TLS/SSL证书有两种用途：对网站、浏览器和Web服务器之间传输的数据进行加密和保护，以及有助于识别并验证网站所有者。</p><p>数字证书的基本架构是公开密钥PKI，即利用一对密钥实施加密和解密。其中密钥包括私钥和公钥，私钥主要用于签名和解密，由用户自定义，只有用户自己知道；公钥用于签名验证和加密，可被多个用户共享。</p><p>数字证书的应用非常广泛，例如在安全电子邮件中使用数字证书可以建构安全电子邮件证书，主要用户加密电子邮件的传输，保护电子邮件在传输和接收过程中的安全²。另外，数字证书也可以用于终端的保护，例如在电子商务的活动过程中安装了数字证书，那么即使其账户或者密码等个人信息被盗取，其账户中的信息与资金安全仍然能得到有效的保障。</p><h4 id="数字签名工作原理" tabindex="-1"><a class="header-anchor" href="#数字签名工作原理"><span>数字签名工作原理</span></a></h4><figure><img src="'+d+'" alt="signature" tabindex="0" loading="lazy"><figcaption>signature</figcaption></figure><blockquote><p>签名过程</p></blockquote><ol><li>利用签名哈希算法（例如 <code>sha256</code> <code>md5</code>）计算包括证书颁发者信息、证书持有者信息、证书有效期、证书持有者公钥等在内的信息（如 <code>x.509</code> 的例子），生成证书摘要 <code>α</code> 。</li><li>颁发者生成一对私钥和公钥，然后使用私钥对指纹进行加密，得到的加密数据即为颁发者的数字签名<code>γ</code>。</li><li>将数字签名<code>γ</code>附加到数字证书上，形成一个签名过的数字证书。</li><li>颁发者将签名过的数字证书和公钥一起交给证书持有者。</li></ol><blockquote><p>验签过程</p></blockquote><ol><li>使用者通过某种方式（例如，浏览器访问）获取签名过的数字证书，解析后可以得到数字签名<code>γ</code>和数字证书。</li><li>使用者使用数字证书中的指纹算法重新计算数字证书相关内容，生成一个新的指纹<code>β</code>。</li><li>同时，使用者使用获取到的颁发者的公钥解密数字签名，得到解密后的指纹<code>α</code>。</li><li>对比两个指纹<code>α</code>和<code>β</code>，如果相同，则证明证书是合法的，使用者可以信任并使用该证书中的信息（例如，持有者的公钥）。</li></ol><details class="hint-container details"><summary>例子：X.509 证书包含的信息</summary><ol><li>证书的版本信息</li><li>证书的序列号</li><li>证书所使用的签名算法</li><li>证书的发行机构名称</li><li>证书的有效期，现在通用的证书一般采用UTC时间格式，它的计时范围为1950-2049</li><li>证书所有人的名称</li><li>证书所有人的公开密钥</li><li>证书发行者对证书的签名</li></ol></details><div class="hint-container tip"><p class="hint-container-title">作用</p><ol><li>数据加密：加密数据确保数据安全</li><li>身份确定：确保双方身份正确</li><li>不可篡改：无法修改已签名的文件</li><li>不可否认：CA 的监督下确保交易达成后不能否认未进行交易</li></ol></div>',33),s=[l];function c(h,T){return o(),r("div",null,s)}const u=e(a,[["render",c],["__file","1-network.html.vue"]]),m=JSON.parse('{"path":"/guide/concepts/network/1-network.html","title":"基础","lang":"zh-CN","frontmatter":{"order":1,"title":"基础","icon":"line-md:star-filled","head":[["meta",{"name":"keywords","content":"网络, OSI七层模型, TCP/IP四层模型, IP地址, 端口, DNS, HTTP, HTTPS, TCP, UDP"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://goguide.ryansu.tech/en/guide/concepts/network/1-network.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/guide/concepts/network/1-network.html"}],["meta",{"property":"og:site_name","content":"Go 面试宝典"}],["meta",{"property":"og:title","content":"基础"}],["meta",{"property":"og:description","content":"OSI七层模型 osiosi TCP和IP模型 HTTP 请求方法 相关信息 HTTP 1.0 支持三种请求方式： GET POST HEAD HTTP 1.1 额外支持 6 种请求方式 OPTIONS PUT PATCH DELETE TRACE CONNECT HTTP 状态码 常见状态码 HTTPS vs HTTP 工作原理 HTTPS 协议会对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://goguide.ryansu.tech/assets/image/article/network/tcpip.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-05T13:24:21.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-05-05T13:24:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础\\",\\"image\\":[\\"https://goguide.ryansu.tech/assets/image/article/network/tcpip.png\\",\\"https://goguide.ryansu.tech/assets/image/article/network/httpsgraph.png\\",\\"https://goguide.ryansu.tech/assets/image/article/network/signature.png\\"],\\"dateModified\\":\\"2024-05-05T13:24:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]],"description":"OSI七层模型 osiosi TCP和IP模型 HTTP 请求方法 相关信息 HTTP 1.0 支持三种请求方式： GET POST HEAD HTTP 1.1 额外支持 6 种请求方式 OPTIONS PUT PATCH DELETE TRACE CONNECT HTTP 状态码 常见状态码 HTTPS vs HTTP 工作原理 HTTPS 协议会对..."},"headers":[{"level":3,"title":"OSI七层模型","slug":"osi七层模型","link":"#osi七层模型","children":[]},{"level":3,"title":"TCP和IP模型","slug":"tcp和ip模型","link":"#tcp和ip模型","children":[]},{"level":3,"title":"HTTP","slug":"http","link":"#http","children":[{"level":4,"title":"HTTP 状态码","slug":"http-状态码","link":"#http-状态码","children":[]},{"level":4,"title":"HTTPS vs HTTP","slug":"https-vs-http","link":"#https-vs-http","children":[]},{"level":4,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]}]},{"level":3,"title":"HTTP 1.0 vs 1.1 vs 2.0","slug":"http-1-0-vs-1-1-vs-2-0","link":"#http-1-0-vs-1-1-vs-2-0","children":[]},{"level":3,"title":"数字证书","slug":"数字证书","link":"#数字证书","children":[{"level":4,"title":"数字签名工作原理","slug":"数字签名工作原理","link":"#数字签名工作原理","children":[]}]}],"git":{"createdTime":1706065630000,"updatedTime":1714915461000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":4}]},"readingTime":{"minutes":11.28,"words":3384},"filePathRelative":"guide/concepts/network/1-network.md","localizedDate":"2024年1月24日","autoDesc":true,"excerpt":"<h3>OSI七层模型</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>层级</th>\\n<th>功能</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>物理层</td>\\n<td>主要实现相邻节点间比特流的透明传输，物理层定义了物理设备的标准，如网线的类型等， <code>网卡也会在这层工作</code> 。</td>\\n</tr>\\n<tr>\\n<td>数据链路层</td>\\n<td>将网络层传下来的比特数据包组装成帧，并在相邻节点的链路上传送帧。数据链路层会将0、1序列划分为具有意义的数据帧传送给另一端。</td>\\n</tr>\\n<tr>\\n<td>网络层</td>\\n<td>选择合适的路由和交换结点，能让数据及时传送，此层的数据称为数据包，要关注的是IP协议。</td>\\n</tr>\\n<tr>\\n<td>传输层</td>\\n<td>向主机进程提供通用的数据传输服务。传输层需要关注的协议有TCP协议和UDP协议。</td>\\n</tr>\\n<tr>\\n<td>会话层</td>\\n<td>负责在网络中的两节点之间建立、维持和终止通信，常见的协议有 ADSP、RPC 等。</td>\\n</tr>\\n<tr>\\n<td>表示层</td>\\n<td>主要负责数据格式的转换，解决不同系统之间通信语法问题</td>\\n</tr>\\n<tr>\\n<td>应用层</td>\\n<td>为应用程序提供交互服务，目的是更方便应用从网络中接收的数据，重点关注HTTP协议</td>\\n</tr>\\n</tbody>\\n</table>"}');export{u as comp,m as data};
