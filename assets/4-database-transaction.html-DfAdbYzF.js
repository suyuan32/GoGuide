import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,d}from"./app-DLqeUa4U.js";const a={},r=d('<h2 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别"><span>隔离级别</span></a></h2><div class="hint-container info"><p class="hint-container-title">名词解释</p><table><thead><tr><th>术语</th><th>定义</th></tr></thead><tbody><tr><td><strong>脏读</strong></td><td>脏读指的是读到了其他事务未提交的数据，未提交意味着这些数据可能会回滚，也就是可能最终不会存到数据库中，也就是不存在的数据。读到了不一定最终存在的数据，这就是脏读。</td></tr><tr><td><strong>可重复读</strong></td><td>可重复读指的是在一个事务内，最开始读到的数据和事务结束前的任意时刻读到的同一批数据都是一致的。主要保证数据更新的准确。</td></tr><tr><td><strong>不可重复读</strong></td><td>对比可重复读，不可重复读指的是在同一事务内，不同的时刻读到的同一批数据可能是不一样的，可能会受到其他事务的影响，比如其他事务改了这批数据并提交了。不可重复读常在数据更新时出现。</td></tr><tr><td><strong>幻读</strong></td><td>假设事务A对某些行的内容作了更改，但是还未提交，此时事务B插入了与事务A更改前的记录相同的记录行，并且在事务A提交之前先提交了，而这时，在事务A中查询，会发现好像刚刚的更改对于某些数据未起作用，但其实是事务B刚插入进来的，让用户感觉很魔幻，感觉出现了幻觉，这就叫幻读。幻读常在数据插入时出现。</td></tr></tbody></table></div><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>描述</th></tr></thead><tbody><tr><td>READ-UNCOMMITTED</td><td>√</td><td>√</td><td>√</td><td>允许读取尚未提交的数据变更，意味着中间数据的变化也会被读取。未提交的数据还可能会回滚，导致读取到不存在的数据。</td></tr><tr><td>READ-COMMITTED</td><td>×</td><td>√</td><td>√</td><td>允许读取并发事务已经提交的数据</td></tr><tr><td>REPEATABLE-READ</td><td>×</td><td>×</td><td>√</td><td>对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改</td></tr><tr><td>SERIALIZABLE</td><td>×</td><td>×</td><td>×</td><td>串行化，最高的隔离级别，所有事务按顺序执行互不干扰</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">注意</p><p>数据库的默认隔离级别是 <code>REPEATABLE-READ</code>，这不能避免幻读</p><p>在 MySQL 中，主要通过 <strong>MVCC</strong>（多版本并发控制）来实现隔离级别，MVCC 是通过保存数据在某个时间点的快照来实现的，这样可以保证事务在执行过程中看到的数据是一致的。也可以通过使用 <strong>锁</strong>（Next-key lock） 来实现隔离级别， 但是锁会导致性能问题，所以 MySQL 选择了 MVCC。</p></div>',4),o=[r];function s(i,c){return n(),e("div",null,o)}const p=t(a,[["render",s],["__file","4-database-transaction.html.vue"]]),g=JSON.parse('{"path":"/guide/concepts/database/SQL/4-database-transaction.html","title":"事务","lang":"zh-CN","frontmatter":{"order":4,"title":"事务","icon":"line-md:star-filled","head":[["meta",{"name":"keywords","content":"事务, 数据库事务, 事务隔离级别, 事务特性"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://goguide.ryansu.tech/en/guide/concepts/database/SQL/4-database-transaction.html"}],["meta",{"property":"og:url","content":"https://goguide.ryansu.tech/guide/concepts/database/SQL/4-database-transaction.html"}],["meta",{"property":"og:site_name","content":"Go 面试宝典"}],["meta",{"property":"og:title","content":"事务"}],["meta",{"property":"og:description","content":"隔离级别 名词解释 注意 数据库的默认隔离级别是 REPEATABLE-READ，这不能避免幻读 在 MySQL 中，主要通过 MVCC（多版本并发控制）来实现隔离级别，MVCC 是通过保存数据在某个时间点的快照来实现的，这样可以保证事务在执行过程中看到的数据是一致的。也可以通过使用 锁（Next-key lock） 来实现隔离级别， 但是锁会导致性能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-05T13:24:21.000Z"}],["meta",{"property":"article:author","content":"Go Guide"}],["meta",{"property":"article:modified_time","content":"2024-05-05T13:24:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-05T13:24:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Go Guide\\",\\"url\\":\\"https://github.com/suyuan32\\"}]}"]],"description":"隔离级别 名词解释 注意 数据库的默认隔离级别是 REPEATABLE-READ，这不能避免幻读 在 MySQL 中，主要通过 MVCC（多版本并发控制）来实现隔离级别，MVCC 是通过保存数据在某个时间点的快照来实现的，这样可以保证事务在执行过程中看到的数据是一致的。也可以通过使用 锁（Next-key lock） 来实现隔离级别， 但是锁会导致性能..."},"headers":[{"level":2,"title":"隔离级别","slug":"隔离级别","link":"#隔离级别","children":[]}],"git":{"createdTime":1714095114000,"updatedTime":1714915461000,"contributors":[{"name":"Ryan Su","email":"yuansu.china.work@gmail.com","commits":3}]},"readingTime":{"minutes":2.25,"words":676},"filePathRelative":"guide/concepts/database/SQL/4-database-transaction.md","localizedDate":"2024年4月26日","autoDesc":true,"excerpt":"<h2>隔离级别</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">名词解释</p>\\n<table>\\n<thead>\\n<tr>\\n<th>术语</th>\\n<th>定义</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>脏读</strong></td>\\n<td>脏读指的是读到了其他事务未提交的数据，未提交意味着这些数据可能会回滚，也就是可能最终不会存到数据库中，也就是不存在的数据。读到了不一定最终存在的数据，这就是脏读。</td>\\n</tr>\\n<tr>\\n<td><strong>可重复读</strong></td>\\n<td>可重复读指的是在一个事务内，最开始读到的数据和事务结束前的任意时刻读到的同一批数据都是一致的。主要保证数据更新的准确。</td>\\n</tr>\\n<tr>\\n<td><strong>不可重复读</strong></td>\\n<td>对比可重复读，不可重复读指的是在同一事务内，不同的时刻读到的同一批数据可能是不一样的，可能会受到其他事务的影响，比如其他事务改了这批数据并提交了。不可重复读常在数据更新时出现。</td>\\n</tr>\\n<tr>\\n<td><strong>幻读</strong></td>\\n<td>假设事务A对某些行的内容作了更改，但是还未提交，此时事务B插入了与事务A更改前的记录相同的记录行，并且在事务A提交之前先提交了，而这时，在事务A中查询，会发现好像刚刚的更改对于某些数据未起作用，但其实是事务B刚插入进来的，让用户感觉很魔幻，感觉出现了幻觉，这就叫幻读。幻读常在数据插入时出现。</td>\\n</tr>\\n</tbody>\\n</table>\\n</div>"}');export{p as comp,g as data};
